---
import Layout from "../../layouts/Layout.astro";
import Game from "../../components/Card/Game/Game.astro";

import User from "../../assets/svg/User_orange.svg";
import Next from "../../assets/svg/Next.svg";
import Prev from "../../assets/svg/Prev.svg";

const { id } = Astro.params;
import { getTeamBoard, addTask, deleteTask, updateTask, getJamPage } from "../../../backend/backend.mjs";
import Tache from "../../components/Card/Team/Tache.astro";
import { getTask } from "../../../backend/backend.mjs";
import { pathHasLocale } from "astro:i18n";
const team = await getTeamBoard(id);
const teamID = team?.id;
const jam = await getJamPage(team?.expand?.game_jam.id);
console.log(team?.expand?.game_jame?.game)

if (Astro.request.method === "POST") {
    try {
        const formData = await Astro.request.formData();
        const formType = formData.get('formType');

        if (formType === 'AddTask') {
            const data = {
                name: formData.get('name'),
                description: formData.get('description'),
                state: formData.get('state'),
                user: formData.get('user')
            }
            const message = await addTask(data, team?.id);
            return Astro.redirect(message.redirect);
        }
        if (formType === 'UpdateTask') {
            const taskid = formData.get('taskid');
            const task = await getTask(taskid)
            const data = {
                name: formData.get("name"),
                description: formData.get("description"),
                state: formData.get("state")
            }
            console.log(data);
            const message = await updateTask(data, taskid, team?.id);
            return Astro.redirect(message.redirect);
        }
        if (formType === 'DeleteTask') {
            const taskid = formData.get('taskid');
            console.log(taskid)
            const message = await deleteTask(taskid, team?.id);
            return Astro.redirect(message.redirect);
        }
    } catch (error) {
        console.error(error)
    }
}
---
<Layout>
        <section x-data="{invite: false}"  class="flex justify-between items-center">
            <div class="flex gap-10 items-center">
                <p>{team?.name}</p>
                <div class="flex items-center gap-2">
                    {
                        team?.expand?.users ? (

                            team?.expand?.users.map((user) => (
                            <a href=`/profile/${user.id}` class="flex gap-2 items-center">
                                <img src={user.image_URL} alt=`Photo de profile de ${user?.name}` width="30px" height="30px"/>
                                <p>{user.name}</p>
                            </a>
                        ))
                        ) : (
                           <p> Aucune personne ne particie a cette jam</p>
                        )
                    }


                    {
                    }
                </div>
            </div>
            <button id="copy-btn" data-link=`https://hive-jam.paolo-vincent.fr/join/${team?.id}` class="btn-light">
                <User />
                Inviter
            </button>
        </section>
        <section class="space-y-10">
            <div class="flex justify-between items-center">
                <h1>{team?.expand?.game_jam?.name}</h1>
                <a href=`/toutes_les_jams/${team?.expand?.game_jam?.id}` class="btn-light">Page de la jam</a>
            </div>
            <div class="grid grid-cols-2 gap-10">
                <article class="flex flex-col gap-4 items-center border-1 py-10 rounded-md">
                {
                team?.time == "present" ? (
                    <p class="CD font-black text-negative text-4xl self-center">{team.time_info}</p>
                ) : (
                    <p class="tiny">{team?.time_info}</p>
                )
            }
                </article>
                <article class="flex flex-col items-center justify-center gap-4">
                    <header>
                        <h2>thème</h2>
                    </header>
                    <p>{team?.expand?.game_jam?.theme}</p>
                </article>
            </div>
        </section>  
        <section x-data="{open: false}" class="mt-20 space-y-5">
            <div class="flex justify-between">
                <h2>Suivie de tâche</h2>
                <button id="menu-btn"
                aria-label="Menu"
                @click="open = !open"
                class="btn-light">Ajouter une thâche</button>
            </div>
            <div class="grid grid-cols-[1fr_1fr_1fr_1fr_75px]">
                <p class="font-bold text-xl text-brand-1">Titre</p>
                <p class="font-bold text-xl">Description</p>
                <p class="font-bold text-xl">Responsables</p>
                <p class="font-bold text-xl">Statut</p>
            </div>
            <div class="flex flex-col gap-3">
                {
                    team?.task.map((record) => <Tache {...record} {teamID} />)
                }
            </div>
            <div class="bg-white fixed border-2 border-brand-1 rounded-2xl w-70 top-30 bottom-40 right-1/3" id="menu" :aria-hidden="!open" x-show="open">
                <form method="POST" class="flex flex-col px-2 py-1 gap-3">
                    <input type="hidden" name="formType" value="AddTask">
                    <input type="text" placeholder="Titre" name="name" required class="btn-light text-black border-brand-1 normal-case">
                    <input type="text" placeholder="Description" name="description" class="btn-light text-black border-brand-1 normal-case">
                    <div>
                        {
                            team?.expand?.users ? (
                                team?.expand?.users.map((user) => (
                                <div class="flex gap-2">
                                    <input type="checkbox" name="user" value={user.id} />
                                    <img src={user.image_URL} alt=`Photo de profile de ${user?.name}` width="40px" />
                                    <p>{user.name}</p>
                                </div>
                            ))
                            ) : (
                                <p>aucun usezrs</p>
                            )
                        }
                    </div>
                    <select name="state" class="btn-light text-black border-brand-1 normal-case">
                        <option value="pas commencé">pas commencé</option>
                        <option value="en cours">en cours</option>
                        <option value="terminé">terminé</option>
                    </select>
                    <button type="submit" class="btn-full">Créer</button>
                </form>
            </div>
        </section>

        

        <section>
            <div class="flex justify-between">
                <h2>Jeux Soumis</h2>
                <a href=`/game/${team?.id}` class="btn-light">Sumettre un jeu</a>
            </div>
        {
            jam?.expand?.games ? (
               <div class="flex flex-col">
                <div
                    class="flex gap-6 overflow-x-scroll border-l-3 border-r-3 border-brand-1 px-10 py-2"
                >
                {
                jam?.expand?.games.map((game) => (
                        <Game {...game}/>
                    ))
                }
                </div>
                <div class="flex justify-center gap-10">
                    <button
                        class="flex justify-center items-center border-2 border-brand-1 rounded-4xl p-2.5 h-10 w-10 cursor-pointer"
                    >
                        <Prev />
                    </button>
                    <button
                        class="flex justify-center items-center border-2 border-brand-1 rounded-4xl p-2.5 h-10 w-10 cursor-pointer"
                    >
                        <Next />
                    </button>
                </div>
            </div> 
            ) : (
                <p>Aucun jeux n'a encore été soumis</p>
            )
        }
            
        </section>
</Layout>

<script>
    const CDs = document.querySelectorAll(".CD");

    function count() {
        CDs.forEach((CD) => {
            if (!CD.textContent) {
                return null;
            }
            const parts = CD.textContent.trim().split(":");
            if (parts.length !== 3) return;

            let [hours, minutes, seconds] = parts.map(Number);

            let totalSeconds = hours * 3600 + minutes * 60 + seconds;
            if (totalSeconds <= 0) return;

            totalSeconds--;

            const h = String(Math.floor(totalSeconds / 3600)).padStart(2, "0");
            const m = String(Math.floor((totalSeconds % 3600) / 60)).padStart(
                2,
                "0",
            );
            const s = String(totalSeconds % 60).padStart(2, "0");

            CD.textContent = `${h}:${m}:${s}`;
        });
    }

    setInterval(count, 1000);
</script>

<script is:client>
      document.getElementById('copy-btn')?.addEventListener('click', () => {
        const link = document.getElementById('copy-btn').dataset.link;
        if (!link) return;

        navigator.clipboard.writeText(link)
          .then(() => alert('Lien copié dans le presse-papier !'))
          .catch((err) => alert('Erreur lors de la copie : ' + err));
      });
</script>