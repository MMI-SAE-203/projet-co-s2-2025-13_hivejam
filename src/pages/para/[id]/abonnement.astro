---
import Layout from "../../../layouts/Layout.astro";

import AbonnementCard from "../../../components/Card/abonnement.astro";

import User from "../../../assets/svg/User.svg";
import Abeille from "../../../assets/svg/Abeille.svg";
import Card from "../../../assets/svg/Card.svg";
import Pen from "../../../assets/svg/Pen.svg";

import Free from "../../../assets/img/abeille_free.png";
import Royal from "../../../assets/img/abeille_premium.png";
import Queen from "../../../assets/img/abeille_royal.png";

import PP from "../../../assets/img/Rectangle_4.png";

import { getUser } from "../../../../backend/backend.mjs";

const { id } = Astro.params;
const user = await getUser(id);

import Pocketbase from "pocketbase";
import { date, map } from "astro:schema";
import type { ACTION_ERROR_CODES, ACTION_QUERY_PARAMS } from "astro:actions";
const pb = new Pocketbase("https://hivejam.paolo-vincent.fr:443/");

let errMessage = "";
if (Astro.request.method === "POST") {
    const fomData = await Astro.request.formData();
    const formType = fomData.get("formType");

    try {
        if (formType === "Nom") {
            const data = {
                name: fomData.get("name"),
            };
            await pb.collection("users").update(id, data);
            return Astro.redirect(`/para/${user?.id}/profile`);
        }
        if (formType === "Pp") {
            const data = {
                image: fomData.get("image"),
            };
            await pb.collection("users").update(id, data);
            return Astro.redirect(`/para/${user?.id}/profile`);
        }
        if (formType === "Bio") {
            const data = {
                bio: fomData.get("bio"),
            };
            await pb.collection("users").update(id, data);
            return Astro.redirect(`/para/${user?.id}/profile`);
        }
    } catch (error) {
        if (error.response?.data?.name?.message) {
            errMessage = "Le nom d'utilisateur est déjà utiliser";
        } else {
            console.error(error);
            return Astro.redirect(`/para/${user?.id}/profile?error`);
        }
    }
}

const free = {
    name: "Bee",
    price: 0,
    image: Free.src,
    description: "Crée des jam pour vous et vos amie",
};
const royal = {
    name: "Royal",
    price: 5,
    image: Royal.src,
    description: "Générer des thème a l'infini pour toujours plus de défis",
};
const queen = {
    name: "Queen",
    price: 10,
    image: Queen.src,
    description: "Inviter autant de gens que vous voulez !",
};
let current;
let sup = [];
if (user?.subscription === "premium") {
    current = royal;
    sup = [queen];
} else if (user?.subscription === "royal") {
    current = queen;
    sup = [];
} else {
    current = free;
    sup = [royal, queen];
}
---

<Layout>
    <section class="flex justify-center items-center gap-20">
        {
            user?.image ? (
                <img
                    src={user?.image_URL}
                    alt={"photo de profile de " + user?.name}
                    class="w-1/4"
                />
            ) : (
                <img src={PP.src} alt={"photo de profile de " + user?.name} />
            )
        }
        <h1>{user?.name}</h1>
    </section>

    <section class="grid grid-cols-4 gap-5">
        <div class="flex flex-col col-start-1 col-end-2 gap-5 py-5">
            <a
                href=`/para/${user?.id}/profile`
                class="flex gap-5 font-bold text-xl items-center text-center px-3"
            >
                <User />
                <p class="w-full">Personnalisez votre profil</p></a
            >
            <span class="bg-brand-1 h-1"></span>
            <a
                href=`/para/${user?.id}/abonnement`
                class="flex gap-5 font-bold text-xl items-center text-center px-3 active"
            >
                <Abeille />
                <p class="w-full">Gérez votre abonnement</p></a
            >
            <span class="bg-brand-1 h-1"></span>
            <a
                href=`/para/${user?.id}/paiment`
                class="flex gap-5 font-bold text-xl items-center text-center px-3"
            >
                <Card />
                <p class="w-full">Méthode de paiment</p></a
            >
            <span class="bg-brand-1 h-1"></span>
            <a
                href=`/para/${user?.id}/access`
                class="flex gap-5 font-bold text-xl items-center text-center px-3"
            >
                <Pen />
                <p class="w-full">Accessibilité</p></a
            >
        </div>
        <div
            class="border-l-3 border-brand-1 px-10 py-5 col-start-2 col-end-5 flex flex-col gap-5"
        >
            <h2>Abonnement actuelle</h2>
            <AbonnementCard {...current} />
            <h2>Passer au niveau supérieur</h2>
            <div class="flex gap-5">
                {
                    Object.keys(sup).length > 0 ? (
                        sup.map((abonnement) => <AbonnementCard {...abonnement} />)
                    ) : (
                        <p>Vous suscrivé déjà à l'abonnement maximum</p>
                    )
                }
            </div>
        </div>
    </section>
</Layout>

<script>
    // Sauvegarder la position de scroll avant de quitter la page
    window.addEventListener("beforeunload", () => {
        sessionStorage.setItem("scrollPosition", window.scrollY);
    });

    // Restaurer la position au chargement
    window.addEventListener("DOMContentLoaded", () => {
        const scrollY = sessionStorage.getItem("scrollPosition");
        if (scrollY !== null) {
            window.scrollTo(0, parseInt(scrollY));
            sessionStorage.removeItem("scrollPosition");
        }
    });
</script>
