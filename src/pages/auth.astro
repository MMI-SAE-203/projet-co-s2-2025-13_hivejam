---
import "../styles/global.css";

import PocketBase from "pocketbase";
const pb = new PocketBase("http://127.0.0.1:8090");

let error = "";
let message = "";
const cookies = Astro.cookies;

// DonnÃ© user si connecter
const token = cookies.get('pb_auth')?.value;

if (token) {
  pb.authStore.save(token);
}

let user = pb.authStore.model;

if (!user && pb.authStore.isValid) {
  await pb.collection('users').authRefresh();
  user = pb.authStore.model;
}

// RÃ©cupÃ©ration formulaire
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const formType = formData.get("formType");

  const email = formData.get("email");
  const password = formData.get("password");
  const passwordConfirm = formData.get("passwordConfirm");

  try {
    if (formType === "register") {
      const name = formData.get("name");
      await pb.collection("users").create({
        email,
        password,
        passwordConfirm,
        name,
      });
      message = "âœ… Compte crÃ©Ã©. Connectez-vous.";
    }

    if (formType === "login") {
      const authData = await pb
        .collection("users")
        .authWithPassword(email, password);
      Astro.cookies.set("pb_auth", pb.authStore.token, {
        path: "/",
        httpOnly: true,
      });
      return Astro.redirect("/");
    }
  } catch (e) {
    console.error(e);
  }
}
console.log(pb.authStore.isValid);
console.log(pb.authStore.record?.id);
console.log(user?.name);
---

<html>
  <head>
    <title>Auth</title>
    <style>
      body {
        font-family: sans-serif;
        padding: 2rem;
        max-width: 500px;
        margin: auto;
      }
      input,
      button {
        margin: 0.5rem 0;
        padding: 0.5rem;
        width: 100%;
      }
      form {
        margin-bottom: 2rem;
      }
      .error {
        color: red;
      }
      .success {
        color: green;
      }
    </style>
  </head>
  <body>
    <h1>Connexion / Inscription</h1>

    {error && <p class="error">{error}</p>}
    {message && <p class="success">{message}</p>}

    {
      user ? (
        <>
          <p>
            Bienvenue, <strong>{user.name || user.email}</strong> ðŸ‘‹
          </p>
          
        </>
      ) : (
        <>
          <h2>Connexion</h2>
          <form method="POST">
            <input type="hidden" name="formType" value="login" />
            <input name="email" type="email" placeholder="Email" required />
            <input
              name="password"
              type="password"
              placeholder="Mot de passe"
              required
            />
            <button type="submit">Connexion</button>
          </form>

          <h2>Inscription</h2>
          <form method="POST">
            <input type="hidden" name="formType" value="register" />
            <input name="name" type="text" placeholder="Pseudo" required />
            <input name="email" type="email" placeholder="Email" required />
            <input
              name="password"
              type="password"
              placeholder="Mot de passe"
              required
            />
            <input
              name="passwordConfirm"
              type="password"
              placeholder="Confirmer votre mot de passe"
              required
            />
            <button type="submit">Creer un compte</button>
          </form>

          <form method="POST">
            <input type="hidden" name="formType" value="logout" />
            <button type="submit">Se dÃ©connecter</button>
          </form>
        </>
      )
    }

    <hr />
    <p><strong>Debug :</strong></p>
    <pre>{JSON.stringify(user, null, 2)}</pre>
    <p>Auth valid : {String(pb.authStore.isValid)}</p>
  </body>
</html>
